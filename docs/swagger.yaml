basePath: /v1
definitions:
  dao.Account:
    properties:
      createdAt:
        type: string
      id:
        type: integer
      password:
        type: string
      token:
        type: string
      updatedAt:
        type: string
      username:
        type: string
    type: object
  domain.TypeGender:
    enum:
    - m
    - f
    type: string
    x-enum-varnames:
    - GenderMale
    - GenderFemale
  dto.AccountCreateReq:
    properties:
      paswd:
        maxLength: 255
        minLength: 8
        type: string
      uname:
        maxLength: 16
        type: string
    required:
    - paswd
    - uname
    type: object
  dto.AccountCreateResp:
    properties:
      id:
        type: integer
      username:
        type: string
    type: object
  dto.AccountLoginReq:
    properties:
      paswd:
        maxLength: 255
        minLength: 8
        type: string
      uname:
        maxLength: 16
        type: string
    required:
    - paswd
    - uname
    type: object
  dto.AccountLoginResp:
    properties:
      access_token:
        type: string
      refresh_token:
        type: string
    type: object
  dto.AccountProfileResp:
    properties:
      age:
        type: integer
      fullname:
        type: string
      gender:
        type: string
      id:
        type: integer
    type: object
  dto.AccountResp:
    properties:
      age:
        type: integer
      fullname:
        type: string
      gender:
        type: string
      id:
        type: integer
      username:
        type: string
    type: object
  dto.AccountUpdateReq:
    properties:
      email:
        type: string
      id:
        type: integer
      paswd:
        maxLength: 255
        minLength: 8
        type: string
      uname:
        maxLength: 16
        type: string
    required:
    - email
    - id
    - paswd
    - uname
    type: object
  dto.AuthorResp:
    properties:
      birth_date:
        type: string
      fullname:
        type: string
      gender:
        $ref: '#/definitions/domain.TypeGender'
      id:
        type: integer
    type: object
  dto.AuthorUpdateReq:
    properties:
      birth_date:
        type: string
      fullname:
        maxLength: 56
        type: string
      gender:
        allOf:
        - $ref: '#/definitions/domain.TypeGender'
        enum:
        - f
        - m
    required:
    - fullname
    type: object
  dto.BookResp:
    properties:
      author:
        type: string
      id:
        type: integer
      publisher:
        type: string
      subtitle:
        type: string
      title:
        type: string
    type: object
  dto.BookUpdateReq:
    properties:
      author_id:
        type: integer
      publisher_id:
        type: integer
      subtitle:
        maxLength: 64
        type: string
      title:
        maxLength: 56
        type: string
    required:
    - author_id
    - publisher_id
    - subtitle
    - title
    type: object
  dto.BorrowingResp:
    properties:
      borrow_date:
        type: string
      borrowed_book:
        type: string
      borrower_person:
        type: string
      id:
        type: integer
      return_date:
        type: string
    type: object
  dto.BorrowingUpdateReq:
    properties:
      book_id:
        type: integer
      borrow_date:
        type: string
      person_id:
        type: integer
      return_date:
        type: string
    required:
    - book_id
    - person_id
    type: object
  dto.ErrorResponse:
    properties:
      errors: {}
      message:
        type: string
      success:
        example: false
        type: boolean
    type: object
  dto.PersonCreateReq:
    properties:
      birth_date:
        type: string
      fullname:
        maxLength: 56
        minLength: 4
        type: string
      gender:
        enum:
        - m
        - f
        type: string
    required:
    - birth_date
    - fullname
    - gender
    type: object
  dto.PersonDetailResp:
    properties:
      age:
        type: integer
      fullname:
        type: string
      gender:
        type: string
      id:
        type: integer
    type: object
  dto.PersonUpdateReq:
    properties:
      birth_date:
        type: string
      fullname:
        maxLength: 56
        minLength: 4
        type: string
      gender:
        enum:
        - m
        - f
        type: string
    required:
    - birth_date
    - fullname
    - gender
    type: object
  dto.PublisherResp:
    properties:
      city:
        type: string
      id:
        type: integer
      name:
        type: string
    type: object
  dto.PublisherUpdateReq:
    properties:
      city:
        maxLength: 32
        type: string
      name:
        maxLength: 48
        minLength: 2
        type: string
    required:
    - city
    - name
    type: object
  dto.SuccessResponse-any:
    properties:
      data: {}
      message:
        type: string
      success:
        example: true
        type: boolean
    type: object
  dto.SuccessResponse-array_dto_AuthorResp:
    properties:
      data:
        items:
          $ref: '#/definitions/dto.AuthorResp'
        type: array
      message:
        type: string
      success:
        example: true
        type: boolean
    type: object
  dto.SuccessResponse-array_dto_BookResp:
    properties:
      data:
        items:
          $ref: '#/definitions/dto.BookResp'
        type: array
      message:
        type: string
      success:
        example: true
        type: boolean
    type: object
  dto.SuccessResponse-array_dto_BorrowingResp:
    properties:
      data:
        items:
          $ref: '#/definitions/dto.BorrowingResp'
        type: array
      message:
        type: string
      success:
        example: true
        type: boolean
    type: object
  dto.SuccessResponse-array_dto_PersonDetailResp:
    properties:
      data:
        items:
          $ref: '#/definitions/dto.PersonDetailResp'
        type: array
      message:
        type: string
      success:
        example: true
        type: boolean
    type: object
  dto.SuccessResponse-array_dto_PublisherResp:
    properties:
      data:
        items:
          $ref: '#/definitions/dto.PublisherResp'
        type: array
      message:
        type: string
      success:
        example: true
        type: boolean
    type: object
  dto.SuccessResponse-dto_AccountCreateResp:
    properties:
      data:
        $ref: '#/definitions/dto.AccountCreateResp'
      message:
        type: string
      success:
        example: true
        type: boolean
    type: object
  dto.SuccessResponse-dto_AccountLoginResp:
    properties:
      data:
        $ref: '#/definitions/dto.AccountLoginResp'
      message:
        type: string
      success:
        example: true
        type: boolean
    type: object
  dto.SuccessResponse-dto_AccountProfileResp:
    properties:
      data:
        $ref: '#/definitions/dto.AccountProfileResp'
      message:
        type: string
      success:
        example: true
        type: boolean
    type: object
  dto.SuccessResponse-dto_AccountResp:
    properties:
      data:
        $ref: '#/definitions/dto.AccountResp'
      message:
        type: string
      success:
        example: true
        type: boolean
    type: object
  dto.SuccessResponse-dto_AuthorResp:
    properties:
      data:
        $ref: '#/definitions/dto.AuthorResp'
      message:
        type: string
      success:
        example: true
        type: boolean
    type: object
  dto.SuccessResponse-dto_BookResp:
    properties:
      data:
        $ref: '#/definitions/dto.BookResp'
      message:
        type: string
      success:
        example: true
        type: boolean
    type: object
  dto.SuccessResponse-dto_BorrowingResp:
    properties:
      data:
        $ref: '#/definitions/dto.BorrowingResp'
      message:
        type: string
      success:
        example: true
        type: boolean
    type: object
  dto.SuccessResponse-dto_PersonDetailResp:
    properties:
      data:
        $ref: '#/definitions/dto.PersonDetailResp'
      message:
        type: string
      success:
        example: true
        type: boolean
    type: object
  dto.SuccessResponse-dto_PublisherResp:
    properties:
      data:
        $ref: '#/definitions/dto.PublisherResp'
      message:
        type: string
      success:
        example: true
        type: boolean
    type: object
externalDocs:
  description: OpenAPI
  url: https://swagger.io/resources/open-api/
host: localhost:3000
info:
  contact:
    email: mark.p.e.muhammad@gmail.com
    name: Mark Muhammad
  description: This is a boilerplate project, please update accordingly.
  license:
    name: MIT
  title: Base API Service
  version: "1.0"
paths:
  /accounts:
    get:
      consumes:
      - application/json
      description: Retrieves a list of accounts based on the provided filter
      operationId: get-accounts
      parameters:
      - in: query
        minimum: 1
        name: l
        type: integer
      - in: query
        name: q
        type: string
      - in: query
        minimum: 0
        name: s
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: List of accounts
          schema:
            items:
              $ref: '#/definitions/dao.Account'
            type: array
        "400":
          description: Bad request
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get a list of accounts
      tags:
      - default
  /accounts/:
    post:
      consumes:
      - application/json
      description: Create a new account using the provided credentials
      parameters:
      - description: Account creation request
        in: body
        name: cred
        required: true
        schema:
          $ref: '#/definitions/dto.AccountCreateReq'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/dto.SuccessResponse-dto_AccountCreateResp'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "422":
          description: Unprocessable Entity
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Create a new account
  /accounts/{id}:
    delete:
      consumes:
      - application/json
      description: Delete an account using the provided ID
      parameters:
      - description: Account ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.SuccessResponse-any'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Delete an account
    get:
      consumes:
      - application/json
      description: Retrieves an account by its ID
      operationId: get-account-by-id
      parameters:
      - description: Account ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Account found
          schema:
            $ref: '#/definitions/dto.SuccessResponse-dto_AccountResp'
        "400":
          description: Invalid ID
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get account by ID
    put:
      consumes:
      - application/json
      description: Updates an account based on the provided ID and request body
      operationId: update-account
      parameters:
      - description: Account ID
        in: path
        name: id
        required: true
        type: integer
      - description: Account data
        in: body
        name: account
        required: true
        schema:
          $ref: '#/definitions/dto.AccountUpdateReq'
      produces:
      - application/json
      responses:
        "200":
          description: Updated account
          schema:
            $ref: '#/definitions/dao.Account'
        "400":
          description: Bad request
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "404":
          description: Not found
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Update an account
      tags:
      - default
  /accounts/login:
    post:
      consumes:
      - application/json
      description: Account login using username & password combination.
      parameters:
      - description: Credential
        in: body
        name: cred
        required: true
        schema:
          $ref: '#/definitions/dto.AccountLoginReq'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.SuccessResponse-dto_AccountLoginResp'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "422":
          description: Unprocessable Entity
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      summary: Account login
  /accounts/profile:
    get:
      consumes:
      - application/json
      description: Get the profile information of the logged-in account
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.SuccessResponse-dto_AccountResp'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get logged-in account profile
  /authors:
    get:
      description: Get a list of authors.
      parameters:
      - description: Author's name
        in: query
        name: q
        type: string
      - description: Data offset
        in: query
        name: s
        type: integer
      - description: Data limit
        in: query
        name: l
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.SuccessResponse-array_dto_AuthorResp'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "422":
          description: Unprocessable Entity
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      summary: Get a list of authors
    post:
      consumes:
      - application/json
      description: Create a author.
      parameters:
      - description: Author's detail
        in: body
        name: detail
        required: true
        schema:
          $ref: '#/definitions/dto.AuthorUpdateReq'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/dto.SuccessResponse-any'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "422":
          description: Unprocessable Entity
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Create a author
  /authors/{id}:
    delete:
      description: Delete a author.
      parameters:
      - description: Author's ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.SuccessResponse-any'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Delete a author
    get:
      description: Get a author's detail.
      parameters:
      - description: Author's ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.SuccessResponse-dto_AuthorResp'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      summary: Get a author's detail
    put:
      consumes:
      - application/json
      description: Update a author's detail.
      parameters:
      - description: Author's ID
        in: path
        name: id
        required: true
        type: integer
      - description: Author's detail
        in: body
        name: detail
        required: true
        schema:
          $ref: '#/definitions/dto.AuthorUpdateReq'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.SuccessResponse-any'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "422":
          description: Unprocessable Entity
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Update a author's detail
  /books:
    get:
      description: Get a list of books.
      parameters:
      - description: Book's name
        in: query
        name: q
        type: string
      - description: Data offset
        in: query
        name: s
        type: integer
      - description: Data limit
        in: query
        name: l
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.SuccessResponse-array_dto_BookResp'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "422":
          description: Unprocessable Entity
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      summary: Get a list of books
    post:
      consumes:
      - application/json
      description: Create a book.
      parameters:
      - description: Book's detail
        in: body
        name: detail
        required: true
        schema:
          $ref: '#/definitions/dto.BookUpdateReq'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/dto.SuccessResponse-any'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "422":
          description: Unprocessable Entity
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Create a book
  /books/{id}:
    delete:
      description: Delete a book.
      parameters:
      - description: Book's ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.SuccessResponse-any'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Delete a book
    get:
      description: Get a book's detail.
      parameters:
      - description: Book's ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.SuccessResponse-dto_BookResp'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      summary: Get a book's detail
    put:
      consumes:
      - application/json
      description: Update a book's detail.
      parameters:
      - description: Book's ID
        in: path
        name: id
        required: true
        type: integer
      - description: Book's detail
        in: body
        name: detail
        required: true
        schema:
          $ref: '#/definitions/dto.BookUpdateReq'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.SuccessResponse-any'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "422":
          description: Unprocessable Entity
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Update a book's detail
  /borrowings:
    get:
      description: Get a list of borrowings.
      parameters:
      - description: Borrowing's name
        in: query
        name: q
        type: string
      - description: Data offset
        in: query
        name: s
        type: integer
      - description: Data limit
        in: query
        name: l
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.SuccessResponse-array_dto_BorrowingResp'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "422":
          description: Unprocessable Entity
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      summary: Get a list of borrowings
    post:
      consumes:
      - application/json
      description: Create a borrowing.
      parameters:
      - description: Borrowing's detail
        in: body
        name: detail
        required: true
        schema:
          $ref: '#/definitions/dto.BorrowingUpdateReq'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/dto.SuccessResponse-any'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "422":
          description: Unprocessable Entity
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Create a borrowing
  /borrowings/{id}:
    delete:
      description: Delete a borrowing.
      parameters:
      - description: Borrowing's ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.SuccessResponse-any'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Delete a borrowing
    get:
      description: Get a borrowing's detail.
      parameters:
      - description: Borrowing's ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.SuccessResponse-dto_BorrowingResp'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      summary: Get a borrowing's detail
    put:
      consumes:
      - application/json
      description: Update a borrowing's detail.
      parameters:
      - description: Borrowing's ID
        in: path
        name: id
        required: true
        type: integer
      - description: Borrowing's detail
        in: body
        name: detail
        required: true
        schema:
          $ref: '#/definitions/dto.BorrowingUpdateReq'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.SuccessResponse-any'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "422":
          description: Unprocessable Entity
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Update a borrowing's detail
  /persons:
    get:
      description: Get a list of person.
      parameters:
      - description: Person's name
        in: query
        name: q
        type: string
      - description: Data offset
        in: query
        name: s
        type: integer
      - description: Data limit
        in: query
        name: l
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.SuccessResponse-array_dto_PersonDetailResp'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "422":
          description: Unprocessable Entity
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      summary: Get a list of person
    post:
      consumes:
      - application/json
      description: Create a person.
      parameters:
      - description: Person's detail
        in: body
        name: detail
        required: true
        schema:
          $ref: '#/definitions/dto.PersonCreateReq'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/dto.SuccessResponse-any'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "422":
          description: Unprocessable Entity
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      summary: Create a person
  /persons/{id}:
    delete:
      consumes:
      - application/json
      description: Deletes a Person entity by ID
      operationId: person-repository-delete
      parameters:
      - description: Person ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Person deleted successfully
          schema: {}
        "404":
          description: Person not found
          schema: {}
        "500":
          description: Internal server error
          schema: {}
      summary: Delete a Person by ID
    get:
      description: Get a person's detail.
      parameters:
      - description: Person's ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.SuccessResponse-dto_PersonDetailResp'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      summary: Get a person's detail
    put:
      consumes:
      - application/json
      description: Update a person's detail.
      parameters:
      - description: Person's ID
        in: path
        name: id
        required: true
        type: integer
      - description: Person's detail
        in: body
        name: detail
        required: true
        schema:
          $ref: '#/definitions/dto.PersonUpdateReq'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.SuccessResponse-any'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Update a person's detail
  /publishers:
    get:
      description: Get a list of publishers.
      parameters:
      - description: Publisher's name
        in: query
        name: q
        type: string
      - description: Data offset
        in: query
        name: s
        type: integer
      - description: Data limit
        in: query
        name: l
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.SuccessResponse-array_dto_PublisherResp'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "422":
          description: Unprocessable Entity
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      summary: Get a list of publishers
    post:
      consumes:
      - application/json
      description: Create a publisher.
      parameters:
      - description: Publisher's detail
        in: body
        name: detail
        required: true
        schema:
          $ref: '#/definitions/dto.PublisherUpdateReq'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/dto.SuccessResponse-any'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "422":
          description: Unprocessable Entity
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Create a publisher
  /publishers/{id}:
    delete:
      description: Delete a publisher.
      parameters:
      - description: Publisher's ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.SuccessResponse-any'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Delete a publisher
    get:
      description: Get a publisher's detail.
      parameters:
      - description: Publisher's ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.SuccessResponse-dto_PublisherResp'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      summary: Get a publisher's detail
    put:
      consumes:
      - application/json
      description: Update a publisher's detail.
      parameters:
      - description: Publisher's ID
        in: path
        name: id
        required: true
        type: integer
      - description: Publisher's detail
        in: body
        name: detail
        required: true
        schema:
          $ref: '#/definitions/dto.PublisherUpdateReq'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.SuccessResponse-any'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "422":
          description: Unprocessable Entity
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Update a publisher's detail
securityDefinitions:
  BearerAuth:
    description: Bearer auth containing JWT
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
